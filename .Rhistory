x <- sample(10)
x
x %>% accumulate(`+`)
x %>%
every(is_vector)
x %>%
every(is_character)
for (i in x){
if(is_character(i)==FALSE){
print "F"
} else {
print "T"
}
}
for (i in x){
if(is_character(i)==FALSE){
print ("F")
} else {
print ("T")
}
}
x
x <- list(1:5, letters, list(10))
x
for (i in x){
if(is_character(i)==FALSE){
print ("F")
} else {
print ("T")
}
}
test <- vector()
for (i in x){
vector[[i]] <- is.character(i)
}
test <- vector()
for (i in x){
vector[i] <- is.character(i)
}
test <- vector()
for (i in x){
test[i] <- is.character(i)
}
test <- vector()
for (i in x){
test[[i]] <- is.character(i)
}
test <- vector()
for (i in x){
test[[i]] <- is_character(i)
}
for (i in x){
test[[i]] <- is_character(x[[i]])
}
x
x %>%
every(is_character)
i = 1
for (i in 1:length(x)){
while(is_character(x[[i]]==FALSE)){
print("FALSE")
else {
print("TRUE")
}
i = i + 1
}
}
i = 1
for (i in 1:length(x)){
while(is_character(x[[i]]==FALSE)){
print("FALSE")
i = i + 1
}
}
x <- list(1:5, letters, list(10))
x %>%
every(is_character)
test <- vector()
i = 1
for (i in 1:length(x)){
while(is_character(x[[i]]==FALSE)){
print("FALSE")
i = i + 1
}
}
x <- list(1:5, letters, list(10))
x %>%
every(is_character)
test <- vector()
i = 1
for (i in 1:length(x)){
while(is_character(x[[i]]==TRUE)){
print("FALSE")
i = i + 1
}
}
x[[1]]
is_character(x[[1]])
for (i in 1:length(x)){
while(is_character(x[[i]]==FALSE)){
print("FALSE")
i = i + 1
}
}
for (i in x){
if(is_character(i)){
print("T")
} else {
print("F")
}
}
i <- 1
while (is_character(x[[i]])==FALSE){
print("F")
i = i+1
}
i <- 1
while (is_character(x[[i]])==FALSE){
print("FALSE")
i = i+1
}
x %>%
every(is_character)
i <- 1
while (is_character(x[[i]])==FALSE){
print("FALSE")
i = i+1
} next {
print("TRUE")
}
i <- 1
while (is_character(x[[i]])==FALSE){
print("FALSE")
i = i+1
} next("TRUE")
i <- 1
while (is_character(x[[i]])==FALSE){
print("FALSE")
i = i+1
}
?every
every
i <- 1
for (i in 1:length(x)){
while (is_character(x[[i]])==FALSE){
print("FALSE")
i = i+1
}
}
for (i in 1:length(x)){
while (is_character(x[[i]])==FALSE){
print("FALSE")
i = i+1
}
}
mtcars
every(is.factor)
mtcars %>% every(is.factor)
mtcars %>% every(is.numeric)
mtcars %>% every(is.numeric)
flights %>% every(is.numeric)
flights %>% keep(is.numeric)
flights %>% keep(is.numeric)
flights %>% keep(is.numeric) %>% colSums()
nycflights13::flights %>% keep(is.numeric) %>% colSums()
nycflights13::flights %>% keep(is.numeric) %>% colSums()
nycflights13::flights %>% keep(is.numeric) %>% colSums()
nycflights13::flights %>% keep(is.numeric) %>% colSums(na.rm=T)
?colsum
?colsums
col_sum3 <- function(df, f) {
is_num <- sapply(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f)
}
df <- tibble(
x = 1:3,
y = 3:1,
z = c("a", "b", "c")
)
col_sum3(df, mean)
col_sum3(df[1:2], mean)
col_sum3(df[1], mean)
col_sum3(df[0], mean)
nycflights13::flights %>% keep(is.numeric) %>% colSums(na.rm=T)
df <- tibble(
x = 1:3,
y = 3:1,
z = c("a", "b", "c")
)
col_sum3(df, mean)
col_sum3 <- function(df, f) {
is_num <- sapply(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f)
}
summary(flights$year)
nycflights13::flights %>% keep(is.numeric) %>% summary()
keep(flights, is.numeric())
keep(flights, is.numeric)
keep(df, is.numeric) %>% summary()
col_sum <- function(df, f){
keep(df, is.numeric) %>% summary()
}
col_sum(flights)
col_sum(flights) %>% length()
col_sum(flights) %>% class()
col_sum(flights) %>% dim()
dim(flights)
col_sum(flights)
keep(flights, is.numeric())
keep(flights, is.numeric) %>% dim()
keep(flights, is.numeric) %>% dim()
col_sum(flights)
keep(flights, is.numeric) %>% class()
keep(flights, is.numeric)
flights %>% dim()
keep(flights, is.numeric) %>% class()
keep(flights, is.numeric) %>% dim()
flights %>% dim()
col_sum(flights)
col_sum(flights) %>% dim()
col_sum(nycflights13::flights)
sapply(flights, is.numeric)
f(flights$year)
col_sum3 <- function(df, f) {
is_num <- sapply(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f)
}
df <- tibble(
x = 1:3,
y = 3:1,
z = c("a", "b", "c")
)
col_sum3(df, mean)
col_sum3(df, mean)
col_sum3(df, mean)
df[1:2]
df[1]
df[0]
col_sum3(df[0], mean)
df[0]
df[0] %>% class()
col_sum3(df[1:2], mean)
col_sum3(df[1], mean)
col_sum3(df[0], mean)
col_sum3 <- function(df, f) {
is_num <- sapply(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f) # apply f function to each numeric column
}
df <- tibble(
x = 1:3,
y = 3:1,
z = c("a", "b", "c")
)
col_sum3(df, mean)
col_sum3(df[1:2], mean)
col_sum3(df[1], mean)
col_sum3(df, mean)
col_sum3(df[0], mean)
col_sum4 <- function(df, f) {
is_num <- sapply(df, is.numeric)
df_num <- df[, is_num]
flatten_dbl(sapply(df_num, f)) # apply f function to each numeric column
}
col_sum4(df, mean)
col_sum4(df, mean)
col_sum4 <- function(df, f) {
df_num <- keep(df, is.numeric)
sapply(df_num, f) # apply f function to each numeric column
}
col_sum4(df, mean)
col_sum4(df[1:2], mean)
col_sum4(df[1], mean)
col_sum4(df[0], mean)
col_sum4 <- function(df, f) {
df_num <- keep(df, is.numeric)
invoke_map(f, df_num) # apply f function to each numeric column
}
col_sum4(df[0], mean)
col_sum4(df[1], mean)
col_sum3 <- function(df, f) {
is_num <- sapply(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f) # apply f function to each numeric column
}
col_sum4 <- function(df, f) {
df_num <- keep(df, is.numeric)
invoke_map(f, df_num) # apply f function to each numeric column
}
df <- tibble(
x = 1:3,
y = 3:1,
z = c("a", "b", "c")
)
col_sum3(df, mean)
col_sum3(df[1:2], mean)
col_sum3(df[1], mean)
col_sum3(df[0], mean)
col_sum4(df, mean)
col_sum3(df, mean)
keep(df, is.numeric)
invoke_map(mean, df_num)
invoke_map(mean, df)
col_sum3(df, mean)
col_sum3(df[1:2], mean)
col_sum3(df[1], mean)
col_sum3(df[0], mean)
col_sum4(df, mean)
col_sum4 <- function(df, f) {
keep(df, is.numeric) %>% invoke_map()
# invoke_map(f, df_num) # apply f function to each numeric column
}
col_sum4(df, mean)
col_sum <- function(df, f){
keep(df, is.numeric) %>% summary()
}
col_sum(nycflights13::flights)
col_sum3 <- function(df, f) {
is_num <- sapply(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f) # apply f function to each numeric column
}
df <- tibble(
x = 1:3,
y = 3:1,
z = c("a", "b", "c")
)
col_sum3(df, mean)
col_sum4 <- function(df, f) {
df_num <- keep(df, is.numeric)
map_dbl(df_num, f)
}
col_sum4(df, mean)
col_sum4(df, mean)
col_sum4 <- function(df, f) {
df_num <- keep(df, is.numeric)
map_dbl(df_num, f)
}
col_sum4(df, mean)
col_sum4(df[1:2], mean)
col_sum4(df[1], mean)
col_sum4(df[0], mean)
col_sum4(df, mean) %>% typeof()
col_sum3(df, mean) %>% typeof()
col_sum3(df, mean) %>% typeof()
col_sum4(df[0], mean)
col_sum3 <- function(df, f) {
is_num <- sapply(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f) # apply f function to each numeric column
}
col_sum3(df, mean)
col_sum3(df, mean) %>% typeof()
col_sum3(df, mean) %>% class()
col_sum3(df[1:2], mean) %>% class()
col_sum3(df[1], mean) %>% class()
col_sum3(df[0], mean) %>% class()
col_sum4(df[0], mean)
col_sum4(df[0], mean) %>% class()
map(c(-10, 0, 10, 100), function(i) rnorm(n = 10, mean = i))
map(1:5, runif)
map_lgl(mtcars, is.factor)
map(-2:2, rnorm, n = 5) # generate 5 normal number using mean from -2 to 2, output as a list
map_dbl(-2:2, rnorm, n = 5)
map_dbl(-2:2, rnorm, n = 1)
map(mtcars, lm(mpg ~ wt, data = .))
pwalk(list(paths, plots), ggsave, path = "~/Desktop/2017_summer/Rclub-r4ds_Ruijuan.Li/R-club-Sep-12/")
models <- mtcars %>%
split(.$cyl) %>%
map(~lm(mpg ~ wt, data = .))
models <- mtcars %>%
map(~lm(mpg ~ wt, data = .))
map_lgl(mtcars, is.factor) # ??? don't understand the Q.
map_dbl(-2:2, rnorm, n = 1)
map_dbl(-2:2, rnorm, n = 5)
map(-2:2, rnorm, n = 5) # generate 5 normal number using mean from -2 to 2, output as a list
map_dbl(-2:2, rnorm, n = 5)
sim %>%
mutate(sim = invoke_map(f, params, n = 10))
test <-
sim %>%
mutate(sim = invoke_map(f, params, n = 10))
test$sim
every
library(brms)
library(tidyverse)
library(stringr)
library(rethinking)
load("~/Desktop/Brassica_project/KIAT_RNA_seq/F1/data/F1.young.gene.Ae_ratio.Rdata")
F1.young.gene.Ae_ratio %>% head()
F1.young.gene.Ae_ratio <-  F1.young.gene.Ae_ratio %>%
mutate(total_F1_414.counts=F1_414_RO+F1_414_AO, # total count
total_F1_415.counts=F1_415_RO+F1_415_AO,
Ae_F1_414.counts=Ae_ratio_414*total_F1_414.counts, # Ae count
Ae_F1_415.counts=Ae_ratio_415*total_F1_415.counts,
SNP_ID=str_c(CHROM,POS,sep="_")) %>% # usage of str_c
dplyr::select(SNP_ID,gene_ID,ends_with("counts"))
F1.young.gene.Ae_ratio %>% head()
Total.counts.long <- F1.young.gene.Ae_ratio %>%
gather(key="cross",value="total.counts",total_F1_414.counts,total_F1_415.counts) %>% # the usage of gather
mutate(cross=str_extract(cross,"F1_41[45]")) %>% # usage of str_extract()
dplyr::select(-starts_with("Ae")) # usage of -starts_with()
Total.counts.long %>% head()
Ae.counts.long <- F1.young.gene.Ae_ratio %>%
gather(key="cross",value="Ae.counts",Ae_F1_414.counts,Ae_F1_415.counts) %>%
mutate(cross=str_extract(cross,"F1_41[45]")) %>%
dplyr::select(-starts_with("total"))
Ae.counts.long %>% head()
F1.counts.long <- full_join(Total.counts.long,Ae.counts.long) # full_join()
F1.counts.long %>% head()
onegene <- F1.counts.long %>% filter(gene_ID=="BnaA01g00020D")
onegene
brms1 <- brm(Ae.counts | trials(total.counts) ~ cross,
family="binomial",
prior=set_prior("normal(0,10)", class="b"),
data=onegene)
brms1
plot(brms1)
logistic(fixef(brms1)[1])
logistic(sum(fixef(brms1)))
onegene %>% group_by(cross) %>% summarize(ae.ratio=mean(Ae.counts/total.counts))
hyp1 <- hypothesis(brms1,"Intercept = (Intercept + crossF1_415)")
hyp1
plot(hyp1)
brms2 <- brm(Ae.counts | trials(total.counts) ~ cross + (1|SNP_ID),
family="binomial",
prior=set_prior("normal(0,10)", class="b"),
data=onegene,
control = list(adapt_delta = 0.99))
brms2
plot(brms2)
AIC(brms1, brms2) # fixed model is better than mixed model...
brms1
brms2
hyp2 <- hypothesis(brms2,"Intercept = (Intercept + crossF1_415)")
hyp2
plot(hyp2)
gene2 <- F1.counts.long %>% filter(gene_ID=="BnaA01g00180D")
brms3 <- update(brms2,newdata=gene2)
brms3
brms3 <- update(brms2,newdata=gene2)
gene2 <- F1.counts.long %>% filter(gene_ID=="BnaA01g00180D")
brms3 <- update(brms2,newdata=gene2)
brms3
brms2 <- brm(Ae.counts | trials(total.counts) ~ cross + (1|SNP_ID),
family="binomial",
prior=set_prior("normal(0,10)", class="b"),
data=onegene,
control = list(adapt_delta = 0.99))
brms2
str(onegene)
onegene$Ae.counts <- as.integer(onegene$Ae.counts)
onegene$total.counts <- as.integer(onegene$total.counts)
onegene$SNP <- 1:nrow(onegene)
colnames(onegene)[4:5] <- c("total_counts", "Ae_counts")
onegene
library(rethinking)
rethinking1 <- map2stan(
alist(
Ae_counts ~ dbinom(total_counts, p),
logit(p) <- a_SNP[SNP],
a_SNP[SNP] <- dnorm(0, 5)
),
data = onegene, iter = 1e4, warmup = 1000, chains = 4)
precis(rethinking1)
rethinking2 <- map2stan(
alist(
Ae_counts ~ dbinom(total_counts, p),
logit(p) <- a_SNP[SNP],
a_SNP[SNP] <- dnorm(a, sigma),
a ~ dnorm(0, 1),
sigma ~ dcauchy(0, 1)
),
data = onegene, iter = 1e4, warmup = 1000, chains = 4)
precis(rethinking2, depth = 2)
onegene$cross_414 <- ifelse(onegene$cross=="F1_414", 1, 0)
rethinking3 <- map2stan(
alist(
Ae_counts ~ dbinom(total_counts, p),
logit(p) <- a_SNP[SNP] + b*cross_414,
a_SNP[SNP] <- dnorm(a, sigma),
a ~ dnorm(0, 1),
sigma ~ dcauchy(0, 1),
b ~ dnorm(0, 10)
),
data = onegene, iter = 1e4, warmup = 1000, chains = 4)
precis(rethinking3, depth = 2)
precis(rethinking3, depth = 2)
compare(rethinking1, rethinking3, rethinking2)
library(snowfall)
F1.counts.long.c <- F1.counts.long[complete.cases(F1.counts.long),]
dim(F1.counts.long)
dim(F1.counts.long.c)
length(unique(F1.counts.long.c$gene_ID)) # 12044
sfInit(parallel = TRUE, cpus = parallel::detectCores())
sfLibrary(brms)
sfExport("F1.counts.long.c","brms2")
brms_all <-
sapply(unique(as.character(F1.counts.long.c$gene_ID)), function(x){
new.data <- F1.counts.long.c %>% filter(gene_ID==x)
tryCatch(update(brms1, newdata = new.data),
error = function(e) NA)
})
ASE_DE_SNP <- data.frame(DE = c(219, 2311),
no_DE = c(2797, 6336))
rownames(ASE_DE_SNP) = c("ASE", "no_ASE")
fisher.test(ASE_DE_SNP)
2300/53700*3800 # before not filtered by genes with SNP
2311/6336*2797 # there is an enrichment in the non DE genes. wierd...
